import React, { useEffect, useState, useContext } from 'react';
import { Redirect } from "react-router-dom";

import ArticleForm from 'components/article';
import useFetch from 'hooks/useFetch';
import { CurrentUserContext } from 'contexts/currentUser';

const EditArticle = ({ match }) => {
    const slug = match.params.slug;
    const apiUrl = `/articles/${slug}`;
    const [
        { response: fetchArticleRes },
        doFetchArticle
    ] = useFetch(apiUrl);
    const [
        { response: updateArticleRes, error: updateArticleErr },
        doUpdateArticle
    ] = useFetch(apiUrl);
    const [isSuccessfulSubmit, setSuccessfulSubmit] = useState(false);
    const [initialValues, setInitialValues] = useState(null);
    const [currentUserState] = useContext(CurrentUserContext);

    const handleSubmit = article => {
        doUpdateArticle({
            method: 'put',
            data: {
                article
            }
        });
    };

    useEffect(() => {
      doFetchArticle();
    }, [doFetchArticle]);

    useEffect(() => {
        if (!fetchArticleRes) return;

        setInitialValues({
            title: fetchArticleRes.article.title,
            description: fetchArticleRes.article.description,
            body: fetchArticleRes.article.body,
            tagList: fetchArticleRes.article.tagList
        });
    }, [fetchArticleRes]);

    useEffect(() => {
        if (!updateArticleRes) return;

        setSuccessfulSubmit(true);
    }, [updateArticleRes]);

    if (currentUserState.isLoggedIn === false) return <Redirect to="/" />

    if (isSuccessfulSubmit) return <Redirect to={`/articles/${slug}`} />

    return (
        <ArticleForm
            errors={(updateArticleErr && updateArticleErr.errors) || {}}
            initialValues={initialValues}
            onSubmit={handleSubmit}
        />
    );
};

export default EditArticle;